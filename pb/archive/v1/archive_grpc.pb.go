// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: archive/v1/archive.proto

package archivePb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArchiveServiceClient is the client API for ArchiveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArchiveServiceClient interface {
	CreateArchive(ctx context.Context, opts ...grpc.CallOption) (ArchiveService_CreateArchiveClient, error)
	GetArchive(ctx context.Context, in *GetArchiveRequest, opts ...grpc.CallOption) (ArchiveService_GetArchiveClient, error)
}

type archiveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArchiveServiceClient(cc grpc.ClientConnInterface) ArchiveServiceClient {
	return &archiveServiceClient{cc}
}

func (c *archiveServiceClient) CreateArchive(ctx context.Context, opts ...grpc.CallOption) (ArchiveService_CreateArchiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArchiveService_ServiceDesc.Streams[0], "/satellite.archive.v1.ArchiveService/CreateArchive", opts...)
	if err != nil {
		return nil, err
	}
	x := &archiveServiceCreateArchiveClient{stream}
	return x, nil
}

type ArchiveService_CreateArchiveClient interface {
	Send(*CreateArchiveRequest) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type archiveServiceCreateArchiveClient struct {
	grpc.ClientStream
}

func (x *archiveServiceCreateArchiveClient) Send(m *CreateArchiveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *archiveServiceCreateArchiveClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *archiveServiceClient) GetArchive(ctx context.Context, in *GetArchiveRequest, opts ...grpc.CallOption) (ArchiveService_GetArchiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArchiveService_ServiceDesc.Streams[1], "/satellite.archive.v1.ArchiveService/GetArchive", opts...)
	if err != nil {
		return nil, err
	}
	x := &archiveServiceGetArchiveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ArchiveService_GetArchiveClient interface {
	Recv() (*GetArchiveResponse, error)
	grpc.ClientStream
}

type archiveServiceGetArchiveClient struct {
	grpc.ClientStream
}

func (x *archiveServiceGetArchiveClient) Recv() (*GetArchiveResponse, error) {
	m := new(GetArchiveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArchiveServiceServer is the server API for ArchiveService service.
// All implementations must embed UnimplementedArchiveServiceServer
// for forward compatibility
type ArchiveServiceServer interface {
	CreateArchive(ArchiveService_CreateArchiveServer) error
	GetArchive(*GetArchiveRequest, ArchiveService_GetArchiveServer) error
	mustEmbedUnimplementedArchiveServiceServer()
}

// UnimplementedArchiveServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArchiveServiceServer struct {
}

func (UnimplementedArchiveServiceServer) CreateArchive(ArchiveService_CreateArchiveServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateArchive not implemented")
}
func (UnimplementedArchiveServiceServer) GetArchive(*GetArchiveRequest, ArchiveService_GetArchiveServer) error {
	return status.Errorf(codes.Unimplemented, "method GetArchive not implemented")
}
func (UnimplementedArchiveServiceServer) mustEmbedUnimplementedArchiveServiceServer() {}

// UnsafeArchiveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArchiveServiceServer will
// result in compilation errors.
type UnsafeArchiveServiceServer interface {
	mustEmbedUnimplementedArchiveServiceServer()
}

func RegisterArchiveServiceServer(s grpc.ServiceRegistrar, srv ArchiveServiceServer) {
	s.RegisterService(&ArchiveService_ServiceDesc, srv)
}

func _ArchiveService_CreateArchive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ArchiveServiceServer).CreateArchive(&archiveServiceCreateArchiveServer{stream})
}

type ArchiveService_CreateArchiveServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*CreateArchiveRequest, error)
	grpc.ServerStream
}

type archiveServiceCreateArchiveServer struct {
	grpc.ServerStream
}

func (x *archiveServiceCreateArchiveServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *archiveServiceCreateArchiveServer) Recv() (*CreateArchiveRequest, error) {
	m := new(CreateArchiveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ArchiveService_GetArchive_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetArchiveRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArchiveServiceServer).GetArchive(m, &archiveServiceGetArchiveServer{stream})
}

type ArchiveService_GetArchiveServer interface {
	Send(*GetArchiveResponse) error
	grpc.ServerStream
}

type archiveServiceGetArchiveServer struct {
	grpc.ServerStream
}

func (x *archiveServiceGetArchiveServer) Send(m *GetArchiveResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ArchiveService_ServiceDesc is the grpc.ServiceDesc for ArchiveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArchiveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "satellite.archive.v1.ArchiveService",
	HandlerType: (*ArchiveServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateArchive",
			Handler:       _ArchiveService_CreateArchive_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetArchive",
			Handler:       _ArchiveService_GetArchive_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "archive/v1/archive.proto",
}
