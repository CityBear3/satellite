// Code generated by MockGen. DO NOT EDIT.
// Source: transaction.go
//
// Generated by this command:
//
//	mockgen -source=transaction.go -package=mock_usecase -destination=./mock/transaction.go
//
// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	usecase "github.com/CityBear3/satellite/internal/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockITxManager is a mock of ITxManager interface.
type MockITxManager struct {
	ctrl     *gomock.Controller
	recorder *MockITxManagerMockRecorder
}

// MockITxManagerMockRecorder is the mock recorder for MockITxManager.
type MockITxManagerMockRecorder struct {
	mock *MockITxManager
}

// NewMockITxManager creates a new mock instance.
func NewMockITxManager(ctrl *gomock.Controller) *MockITxManager {
	mock := &MockITxManager{ctrl: ctrl}
	mock.recorder = &MockITxManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITxManager) EXPECT() *MockITxManagerMockRecorder {
	return m.recorder
}

// DoInTx mocks base method.
func (m *MockITxManager) DoInTx(ctx context.Context, operation usecase.Operation) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoInTx", ctx, operation)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoInTx indicates an expected call of DoInTx.
func (mr *MockITxManagerMockRecorder) DoInTx(ctx, operation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoInTx", reflect.TypeOf((*MockITxManager)(nil).DoInTx), ctx, operation)
}
