// Code generated by MockGen. DO NOT EDIT.
// Source: file.go
//
// Generated by this command:
//
//	mockgen -source=file.go -package=mock_service -destination=../../adaptor/service/mock/file.go
//
// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	primitive "github.com/CityBear3/satellite/internal/domain/primitive"
	archive "github.com/CityBear3/satellite/internal/domain/primitive/archive"
	gomock "go.uber.org/mock/gomock"
)

// MockIFileService is a mock of IFileService interface.
type MockIFileService struct {
	ctrl     *gomock.Controller
	recorder *MockIFileServiceMockRecorder
}

// MockIFileServiceMockRecorder is the mock recorder for MockIFileService.
type MockIFileServiceMockRecorder struct {
	mock *MockIFileService
}

// NewMockIFileService creates a new mock instance.
func NewMockIFileService(ctrl *gomock.Controller) *MockIFileService {
	mock := &MockIFileService{ctrl: ctrl}
	mock.recorder = &MockIFileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFileService) EXPECT() *MockIFileServiceMockRecorder {
	return m.recorder
}

// GetFile mocks base method.
func (m *MockIFileService) GetFile(ctx context.Context, archiveID primitive.ID, contentType archive.ContentType) (archive.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", ctx, archiveID, contentType)
	ret0, _ := ret[0].(archive.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockIFileServiceMockRecorder) GetFile(ctx, archiveID, contentType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockIFileService)(nil).GetFile), ctx, archiveID, contentType)
}

// Save mocks base method.
func (m *MockIFileService) Save(ctx context.Context, archiveID primitive.ID, contentType archive.ContentType, data archive.Data) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, archiveID, contentType, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIFileServiceMockRecorder) Save(ctx, archiveID, contentType, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIFileService)(nil).Save), ctx, archiveID, contentType, data)
}
