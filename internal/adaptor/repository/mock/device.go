// Code generated by MockGen. DO NOT EDIT.
// Source: device.go
//
// Generated by this command:
//
//	mockgen -source=device.go -package=mock_repository -destination=../../../adaptor/gateway/repository/mock/device.go
//
// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/CityBear3/satellite/internal/domain/entity"
	primitive "github.com/CityBear3/satellite/internal/domain/primitive"
	gomock "go.uber.org/mock/gomock"
)

// MockIDeviceRepository is a mock of IDeviceRepository interface.
type MockIDeviceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIDeviceRepositoryMockRecorder
}

// MockIDeviceRepositoryMockRecorder is the mock recorder for MockIDeviceRepository.
type MockIDeviceRepositoryMockRecorder struct {
	mock *MockIDeviceRepository
}

// NewMockIDeviceRepository creates a new mock instance.
func NewMockIDeviceRepository(ctrl *gomock.Controller) *MockIDeviceRepository {
	mock := &MockIDeviceRepository{ctrl: ctrl}
	mock.recorder = &MockIDeviceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDeviceRepository) EXPECT() *MockIDeviceRepositoryMockRecorder {
	return m.recorder
}

// GetDevice mocks base method.
func (m *MockIDeviceRepository) GetDevice(ctx context.Context, deviceID primitive.ID) (entity.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice", ctx, deviceID)
	ret0, _ := ret[0].(entity.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevice indicates an expected call of GetDevice.
func (mr *MockIDeviceRepositoryMockRecorder) GetDevice(ctx, deviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockIDeviceRepository)(nil).GetDevice), ctx, deviceID)
}
