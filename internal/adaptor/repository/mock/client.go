// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -package=mock_repository -destination=../../../adaptor/repository/mock/client.go
//
// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/CityBear3/satellite/internal/domain/entity"
	primitive "github.com/CityBear3/satellite/internal/domain/primitive"
	gomock "go.uber.org/mock/gomock"
)

// MockIClientRepository is a mock of IClientRepository interface.
type MockIClientRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIClientRepositoryMockRecorder
}

// MockIClientRepositoryMockRecorder is the mock recorder for MockIClientRepository.
type MockIClientRepositoryMockRecorder struct {
	mock *MockIClientRepository
}

// NewMockIClientRepository creates a new mock instance.
func NewMockIClientRepository(ctrl *gomock.Controller) *MockIClientRepository {
	mock := &MockIClientRepository{ctrl: ctrl}
	mock.recorder = &MockIClientRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClientRepository) EXPECT() *MockIClientRepositoryMockRecorder {
	return m.recorder
}

// GetClient mocks base method.
func (m *MockIClientRepository) GetClient(ctx context.Context, clientID primitive.ID) (entity.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", ctx, clientID)
	ret0, _ := ret[0].(entity.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockIClientRepositoryMockRecorder) GetClient(ctx, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockIClientRepository)(nil).GetClient), ctx, clientID)
}
